// <auto-generated />
using System;
using DailyNotesChart.Persistance.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DailyNotesChart.Persistance.Migrations
{
    [DbContext(typeof(DailyNotesChartWriteDbContext))]
    [Migration("20250307102551_AddCreatedOnUtcToRefreshTokens")]
    partial class AddCreatedOnUtcToRefreshTokens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.ChartBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChartGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ChartGroupId");

                    b.ToTable("Charts");

                    b.HasDiscriminator().HasValue("ChartBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ChartGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultChartTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DefaultNoteTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DefaultNoteTemplateId");

                    b.ToTable("ChartGroups");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteCluster.NoteBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ChartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ChartId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("NoteBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteTemplateCluster.NoteTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChartGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ChartGroupId");

                    b.ToTable("NoteTemplates");
                });

            modelBuilder.Entity("DailyNotesChart.Persistance.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DailyNotesChart.Persistance.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.TimeOnlyChart", b =>
                {
                    b.HasBaseType("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.ChartBase");

                    b.HasDiscriminator().HasValue("TimeOnlyChart");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.TwoDimentionalChart", b =>
                {
                    b.HasBaseType("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.ChartBase");

                    b.Property<string>("YAxeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasDiscriminator().HasValue("TwoDimentionalChart");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteCluster.TimeOnlyNote", b =>
                {
                    b.HasBaseType("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteCluster.NoteBase");

                    b.HasDiscriminator().HasValue("TimeOnlyNote");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteCluster.TwoDimentionalNote", b =>
                {
                    b.HasBaseType("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteCluster.NoteBase");

                    b.Property<double>("YAxeValue")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("TwoDimentionalNote");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.ChartBase", b =>
                {
                    b.HasOne("DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ChartGroup", null)
                        .WithMany("Charts")
                        .HasForeignKey("ChartGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ChartGroup", b =>
                {
                    b.HasOne("DailyNotesChart.Persistance.Models.ApplicationUser", null)
                        .WithMany("ChartGroups")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteTemplateCluster.NoteTemplate", "DefaultNoteTemplate")
                        .WithMany()
                        .HasForeignKey("DefaultNoteTemplateId");

                    b.Navigation("DefaultNoteTemplate");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteCluster.NoteBase", b =>
                {
                    b.HasOne("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.ChartBase", null)
                        .WithMany("Notes")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteTemplateCluster.NoteTemplate", b =>
                {
                    b.HasOne("DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ChartGroup", null)
                        .WithMany("NoteTemplates")
                        .HasForeignKey("ChartGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyNotesChart.Persistance.Models.RefreshToken", b =>
                {
                    b.HasOne("DailyNotesChart.Persistance.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", b =>
                {
                    b.HasOne("DailyNotesChart.Persistance.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", b =>
                {
                    b.HasOne("DailyNotesChart.Persistance.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyNotesChart.Persistance.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ValueObjects.ApplicationUserId>", b =>
                {
                    b.HasOne("DailyNotesChart.Persistance.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.TwoDimentionalChart", b =>
                {
                    b.OwnsOne("DailyNotesChart.Domain.Models.ChartGroupAggregate.ChartCluster.ValueObjects.YAxeValues", "YAxeValues", b1 =>
                        {
                            b1.Property<Guid>("TwoDimentionalChartId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("End")
                                .HasMaxLength(10000)
                                .HasColumnType("float");

                            b1.Property<bool>("IsInteger")
                                .HasColumnType("bit")
                                .HasColumnName("YAxevalues_IsInteger");

                            b1.Property<double>("Start")
                                .HasMaxLength(10000)
                                .HasColumnType("float");

                            b1.HasKey("TwoDimentionalChartId");

                            b1.ToTable("Charts");

                            b1.WithOwner()
                                .HasForeignKey("TwoDimentionalChartId");
                        });

                    b.Navigation("YAxeValues")
                        .IsRequired();
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.ChartBase", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ChartGroup", b =>
                {
                    b.Navigation("Charts");

                    b.Navigation("NoteTemplates");
                });

            modelBuilder.Entity("DailyNotesChart.Persistance.Models.ApplicationUser", b =>
                {
                    b.Navigation("ChartGroups");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
