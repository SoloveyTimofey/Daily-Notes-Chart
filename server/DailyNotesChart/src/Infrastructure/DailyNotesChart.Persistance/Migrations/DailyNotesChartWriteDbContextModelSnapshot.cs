// <auto-generated />
using System;
using DailyNotesChart.Persistance.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DailyNotesChart.Persistance.Migrations
{
    [DbContext(typeof(DailyNotesChartWriteDbContext))]
    partial class DailyNotesChartWriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.ChartBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChartGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ChartGroupId");

                    b.ToTable("Charts");

                    b.HasDiscriminator().HasValue("ChartBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ChartGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultChartTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DefaultNoteTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultNoteTemplateId");

                    b.ToTable("ChartGroups");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteCluster.NoteBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ChartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ChartId");

                    b.ToTable("Notes");

                    b.HasDiscriminator().HasValue("NoteBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteTemplateCluster.NoteTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChartGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ChartGroupId");

                    b.ToTable("NoteTemplates");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.TimeOnlyChart", b =>
                {
                    b.HasBaseType("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.ChartBase");

                    b.HasDiscriminator().HasValue("TimeOnlyChart");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.TwoDimentionalChart", b =>
                {
                    b.HasBaseType("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.ChartBase");

                    b.Property<string>("YAxeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasDiscriminator().HasValue("TwoDimentionalChart");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteCluster.TimeOnlyNote", b =>
                {
                    b.HasBaseType("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteCluster.NoteBase");

                    b.HasDiscriminator().HasValue("TimeOnlyNote");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteCluster.TwoDimentionalNote", b =>
                {
                    b.HasBaseType("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteCluster.NoteBase");

                    b.Property<double>("YAxeValue")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("TwoDimentionalNote");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.ChartBase", b =>
                {
                    b.HasOne("DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ChartGroup", null)
                        .WithMany("Charts")
                        .HasForeignKey("ChartGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ChartGroup", b =>
                {
                    b.HasOne("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteTemplateCluster.NoteTemplate", "DefaultNoteTemplate")
                        .WithMany()
                        .HasForeignKey("DefaultNoteTemplateId");

                    b.Navigation("DefaultNoteTemplate");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteCluster.NoteBase", b =>
                {
                    b.HasOne("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.ChartBase", null)
                        .WithMany("Notes")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.NoteTemplateCluster.NoteTemplate", b =>
                {
                    b.HasOne("DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ChartGroup", null)
                        .WithMany("NoteTemplates")
                        .HasForeignKey("ChartGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.TwoDimentionalChart", b =>
                {
                    b.OwnsOne("DailyNotesChart.Domain.Models.ChartGroupAggregate.ChartCluster.ValueObjects.YAxeValues", "YAxeValues", b1 =>
                        {
                            b1.Property<Guid>("TwoDimentionalChartId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("End")
                                .HasMaxLength(10000)
                                .HasColumnType("float");

                            b1.Property<bool>("IsInteger")
                                .HasColumnType("bit")
                                .HasColumnName("YAxevalues_IsInteger");

                            b1.Property<double>("Start")
                                .HasMaxLength(10000)
                                .HasColumnType("float");

                            b1.HasKey("TwoDimentionalChartId");

                            b1.ToTable("Charts");

                            b1.WithOwner()
                                .HasForeignKey("TwoDimentionalChartId");
                        });

                    b.Navigation("YAxeValues")
                        .IsRequired();
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartAggregate.AggregateRoot.ChartBase", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("DailyNotesChart.Domain.Models.ChartGroupAggregate.AggregateRoot.ChartGroup", b =>
                {
                    b.Navigation("Charts");

                    b.Navigation("NoteTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
